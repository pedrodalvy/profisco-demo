# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Empenho {
  id: ID!
  unidadeGestora: Float!
  data_emissao: DateTime!
  funcionalProgramatica: String!
  numero: String!
  numeroOriginal: String!
  valorEmpenho: Float!
  tipo: String!
  modalidade: String!
  numeroContrato: String!
  exercicio: Float!
  numeroProcesso: String!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EmpenhoDeleteResponse {
  id: ID
  unidadeGestora: Float
  data_emissao: DateTime
  funcionalProgramatica: String
  numero: String
  numeroOriginal: String
  valorEmpenho: Float
  tipo: String
  modalidade: String
  numeroContrato: String
  exercicio: Float
  numeroProcesso: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type EmpenhoEdge {
  """The node containing the Empenho"""
  node: Empenho!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type EmpenhoConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [EmpenhoEdge!]!
}

type EmpenhoAggregateGroupBy {
  id: ID
  unidadeGestora: Float
}

type EmpenhoCountAggregate {
  id: Int
  unidadeGestora: Int
}

type EmpenhoSumAggregate {
  id: Float
  unidadeGestora: Float
}

type EmpenhoAvgAggregate {
  id: Float
  unidadeGestora: Float
}

type EmpenhoMinAggregate {
  id: ID
  unidadeGestora: Float
}

type EmpenhoMaxAggregate {
  id: ID
  unidadeGestora: Float
}

type Query {
  empenho(
    """The id of the record to find."""
    id: ID!
  ): Empenho
  empenhos(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: EmpenhoFilter = {}

    """Specify to sort results."""
    sorting: [EmpenhoSort!] = []
  ): EmpenhoConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input EmpenhoFilter {
  and: [EmpenhoFilter!]
  or: [EmpenhoFilter!]
  id: IDFilterComparison
  unidadeGestora: NumberFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input EmpenhoSort {
  field: EmpenhoSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EmpenhoSortFields {
  id
  unidadeGestora
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  createEmpenho(input: CreateOneEmpenhoInput!): Empenho!
  updateEmpenho(input: UpdateOneEmpenhoInput!): Empenho!
  deleteEmpenho(input: DeleteOneEmpenhoInput!): EmpenhoDeleteResponse!
}

input CreateOneEmpenhoInput {
  """The record to create"""
  empenho: CreateEmpenhoInput!
}

input CreateEmpenhoInput {
  unidadeGestora: Float!
  dataEmissao: String!
  funcionalProgramatica: String!
  numero: String!
  numeroOriginal: String
  valorEmpenho: Float!
  tipo: String!
  modalidade: String!
  exercicio: Float!
  numeroContrato: String
  numeroProcesso: String
}

input UpdateOneEmpenhoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateEmpenhoInput!
}

input UpdateEmpenhoInput {
  unidadeGestora: Float
  dataEmissao: String
  funcionalProgramatica: String
  numero: String
  numeroOriginal: String
  valorEmpenho: Float
  tipo: String
  modalidade: String
  exercicio: Float
  numeroContrato: String
  numeroProcesso: String
}

input DeleteOneEmpenhoInput {
  """The id of the record to delete."""
  id: ID!
}
