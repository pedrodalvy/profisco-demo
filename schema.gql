# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type OrdemBancaria {
  id: ID!
  numeroDocumento: String!
  numeroDocumentoOriginal: String!
  credorIdentificacao: String!
  finalidadePagamento: String!
  justificativaEstorno: String!
  numeroContrato: Float!
  numeroConvenio: Float!
  aditivoConvenio: Float!
  idusoFonteRecurso: String!
  situacaoOb: String!
  notaFiscal: String!
  beneficiarios: String!
  codigoUg: Float!
  ugFavorecida: Float!
  versaoContrato: Float!
  identificadorUsoCodigo: Float!
  valorDocumento: Float!
  dataEmissaoDocumento: DateTime!
  dataContabilizacaoDocumento: DateTime!
  empenhoId: Float!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  empenho: Empenho!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Empenho {
  id: ID!
  unidadeGestora: Float!
  dataEmissao: DateTime!
  funcionalProgramatica: String!
  numero: String!
  numeroOriginal: String
  valorEmpenho: Float!
  tipo: String!
  modalidade: String!
  numeroContrato: String!
  exercicio: Float!
  numeroProcesso: String!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  ordensBancarias(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: OrdemBancariaFilter = {}

    """Specify to sort results."""
    sorting: [OrdemBancariaSort!] = []
  ): EmpenhoOrdensBancariasConnection!
  ordensBancariasAggregate(
    """Filter to find records to aggregate on"""
    filter: OrdemBancariaAggregateFilter
  ): [EmpenhoOrdensBancariasAggregateResponse!]!
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input OrdemBancariaFilter {
  and: [OrdemBancariaFilter!]
  or: [OrdemBancariaFilter!]
  id: IDFilterComparison
  numeroDocumento: StringFieldComparison
  numeroDocumentoOriginal: StringFieldComparison
  credorIdentificacao: StringFieldComparison
  finalidadePagamento: StringFieldComparison
  justificativaEstorno: StringFieldComparison
  numeroContrato: NumberFieldComparison
  numeroConvenio: NumberFieldComparison
  aditivoConvenio: NumberFieldComparison
  idusoFonteRecurso: StringFieldComparison
  situacaoOb: StringFieldComparison
  notaFiscal: StringFieldComparison
  beneficiarios: StringFieldComparison
  codigoUg: NumberFieldComparison
  ugFavorecida: NumberFieldComparison
  versaoContrato: NumberFieldComparison
  identificadorUsoCodigo: NumberFieldComparison
  valorDocumento: NumberFieldComparison
  dataEmissaoDocumento: DateFieldComparison
  dataContabilizacaoDocumento: DateFieldComparison
  empenhoId: NumberFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input OrdemBancariaSort {
  field: OrdemBancariaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrdemBancariaSortFields {
  id
  numeroDocumento
  numeroDocumentoOriginal
  credorIdentificacao
  finalidadePagamento
  justificativaEstorno
  numeroContrato
  numeroConvenio
  aditivoConvenio
  idusoFonteRecurso
  situacaoOb
  notaFiscal
  beneficiarios
  codigoUg
  ugFavorecida
  versaoContrato
  identificadorUsoCodigo
  valorDocumento
  dataEmissaoDocumento
  dataContabilizacaoDocumento
  empenhoId
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input OrdemBancariaAggregateFilter {
  and: [OrdemBancariaAggregateFilter!]
  or: [OrdemBancariaAggregateFilter!]
  id: IDFilterComparison
  numeroDocumento: StringFieldComparison
  numeroDocumentoOriginal: StringFieldComparison
  credorIdentificacao: StringFieldComparison
  finalidadePagamento: StringFieldComparison
  justificativaEstorno: StringFieldComparison
  numeroContrato: NumberFieldComparison
  numeroConvenio: NumberFieldComparison
  aditivoConvenio: NumberFieldComparison
  idusoFonteRecurso: StringFieldComparison
  situacaoOb: StringFieldComparison
  notaFiscal: StringFieldComparison
  beneficiarios: StringFieldComparison
  codigoUg: NumberFieldComparison
  ugFavorecida: NumberFieldComparison
  versaoContrato: NumberFieldComparison
  identificadorUsoCodigo: NumberFieldComparison
  valorDocumento: NumberFieldComparison
  dataEmissaoDocumento: DateFieldComparison
  dataContabilizacaoDocumento: DateFieldComparison
  empenhoId: NumberFieldComparison
}

type EmpenhoDeleteResponse {
  id: ID
  unidadeGestora: Float
  dataEmissao: DateTime
  funcionalProgramatica: String
  numero: String
  numeroOriginal: String
  valorEmpenho: Float
  tipo: String
  modalidade: String
  numeroContrato: String
  exercicio: Float
  numeroProcesso: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  ordensBancarias: [OrdemBancaria!]
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type EmpenhoConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Empenho!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type EmpenhoAggregateGroupBy {
  id: ID
  unidadeGestora: Float
}

type EmpenhoCountAggregate {
  id: Int
  unidadeGestora: Int
}

type EmpenhoSumAggregate {
  id: Float
  unidadeGestora: Float
}

type EmpenhoAvgAggregate {
  id: Float
  unidadeGestora: Float
}

type EmpenhoMinAggregate {
  id: ID
  unidadeGestora: Float
}

type EmpenhoMaxAggregate {
  id: ID
  unidadeGestora: Float
}

type EmpenhoAggregateResponse {
  groupBy: EmpenhoAggregateGroupBy
  count: EmpenhoCountAggregate
  sum: EmpenhoSumAggregate
  avg: EmpenhoAvgAggregate
  min: EmpenhoMinAggregate
  max: EmpenhoMaxAggregate
}

type EmpenhoOrdensBancariasConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [OrdemBancaria!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type EmpenhoOrdensBancariasAggregateGroupBy {
  id: ID
  numeroDocumento: String
  numeroDocumentoOriginal: String
  credorIdentificacao: String
  finalidadePagamento: String
  justificativaEstorno: String
  numeroContrato: Float
  numeroConvenio: Float
  aditivoConvenio: Float
  idusoFonteRecurso: String
  situacaoOb: String
  notaFiscal: String
  beneficiarios: String
  codigoUg: Float
  ugFavorecida: Float
  versaoContrato: Float
  identificadorUsoCodigo: Float
  valorDocumento: Float
  dataEmissaoDocumento: DateTime
  dataContabilizacaoDocumento: DateTime
  empenhoId: Float
}

type EmpenhoOrdensBancariasCountAggregate {
  id: Int
  numeroDocumento: Int
  numeroDocumentoOriginal: Int
  credorIdentificacao: Int
  finalidadePagamento: Int
  justificativaEstorno: Int
  numeroContrato: Int
  numeroConvenio: Int
  aditivoConvenio: Int
  idusoFonteRecurso: Int
  situacaoOb: Int
  notaFiscal: Int
  beneficiarios: Int
  codigoUg: Int
  ugFavorecida: Int
  versaoContrato: Int
  identificadorUsoCodigo: Int
  valorDocumento: Int
  dataEmissaoDocumento: Int
  dataContabilizacaoDocumento: Int
  empenhoId: Int
}

type EmpenhoOrdensBancariasSumAggregate {
  id: Float
  numeroContrato: Float
  numeroConvenio: Float
  aditivoConvenio: Float
  codigoUg: Float
  ugFavorecida: Float
  versaoContrato: Float
  identificadorUsoCodigo: Float
  valorDocumento: Float
  empenhoId: Float
}

type EmpenhoOrdensBancariasAvgAggregate {
  id: Float
  numeroContrato: Float
  numeroConvenio: Float
  aditivoConvenio: Float
  codigoUg: Float
  ugFavorecida: Float
  versaoContrato: Float
  identificadorUsoCodigo: Float
  valorDocumento: Float
  empenhoId: Float
}

type EmpenhoOrdensBancariasMinAggregate {
  id: ID
  numeroDocumento: String
  numeroDocumentoOriginal: String
  credorIdentificacao: String
  finalidadePagamento: String
  justificativaEstorno: String
  numeroContrato: Float
  numeroConvenio: Float
  aditivoConvenio: Float
  idusoFonteRecurso: String
  situacaoOb: String
  notaFiscal: String
  beneficiarios: String
  codigoUg: Float
  ugFavorecida: Float
  versaoContrato: Float
  identificadorUsoCodigo: Float
  valorDocumento: Float
  dataEmissaoDocumento: DateTime
  dataContabilizacaoDocumento: DateTime
  empenhoId: Float
}

type EmpenhoOrdensBancariasMaxAggregate {
  id: ID
  numeroDocumento: String
  numeroDocumentoOriginal: String
  credorIdentificacao: String
  finalidadePagamento: String
  justificativaEstorno: String
  numeroContrato: Float
  numeroConvenio: Float
  aditivoConvenio: Float
  idusoFonteRecurso: String
  situacaoOb: String
  notaFiscal: String
  beneficiarios: String
  codigoUg: Float
  ugFavorecida: Float
  versaoContrato: Float
  identificadorUsoCodigo: Float
  valorDocumento: Float
  dataEmissaoDocumento: DateTime
  dataContabilizacaoDocumento: DateTime
  empenhoId: Float
}

type EmpenhoOrdensBancariasAggregateResponse {
  groupBy: EmpenhoOrdensBancariasAggregateGroupBy
  count: EmpenhoOrdensBancariasCountAggregate
  sum: EmpenhoOrdensBancariasSumAggregate
  avg: EmpenhoOrdensBancariasAvgAggregate
  min: EmpenhoOrdensBancariasMinAggregate
  max: EmpenhoOrdensBancariasMaxAggregate
}

type ListaCredoresOrdemBancaria {
  CredorOBLista: String
  Valor: Float
  SituacaoPagamentoCredor: String
  NomeCompletoBeneficiario: String
  NumeroPedido: String
  TipoPedidoRelatorio: String
}

type ItensOrdemBancaria {
  NumeroLiquidacao: String
  NumeroRetencao: String
  NumeroEmpenho: String
  NumeroEmpenhoOriginal: String
  FuncionalProgramatica: String
  NaturezaDespesa: String
  ValorItem: Float
  ListaCredoresOrdemBancaria: [ListaCredoresOrdemBancaria!]
}

type OrdemBancariaSpfDto {
  CodigoUG: Float
  NumeroDocumento: String
  NumeroDocumentoOriginal: String
  CredorIdentificacaoFavorecida: String
  UGFavorecida: Float
  DataEmissaoDocumento: DateTime
  DataContabilizacaoDocumento: DateTime
  FinalidadePagamento: String
  JustificativaEstorno: String
  NumeroContrato: Float
  VersaoContrato: Float
  NumeroConvenio: Float
  AditivoConvenio: Float
  IdentificadorUsoCodigo: Float
  IdusoFonteRecurso: String
  ValorDocumento: Float
  SituacaoOB: String
  ItensOrdemBancaria: [ItensOrdemBancaria!]
}

type OrdemBancariaConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [OrdemBancaria!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrdemBancariaAggregateGroupBy {
  id: ID
  numeroDocumento: String
  numeroDocumentoOriginal: String
  credorIdentificacao: String
  finalidadePagamento: String
  justificativaEstorno: String
  numeroContrato: Float
  numeroConvenio: Float
  aditivoConvenio: Float
  idusoFonteRecurso: String
  situacaoOb: String
  notaFiscal: String
  beneficiarios: String
  codigoUg: Float
  ugFavorecida: Float
  versaoContrato: Float
  identificadorUsoCodigo: Float
  valorDocumento: Float
  dataEmissaoDocumento: DateTime
  dataContabilizacaoDocumento: DateTime
  empenhoId: Float
}

type OrdemBancariaCountAggregate {
  id: Int
  numeroDocumento: Int
  numeroDocumentoOriginal: Int
  credorIdentificacao: Int
  finalidadePagamento: Int
  justificativaEstorno: Int
  numeroContrato: Int
  numeroConvenio: Int
  aditivoConvenio: Int
  idusoFonteRecurso: Int
  situacaoOb: Int
  notaFiscal: Int
  beneficiarios: Int
  codigoUg: Int
  ugFavorecida: Int
  versaoContrato: Int
  identificadorUsoCodigo: Int
  valorDocumento: Int
  dataEmissaoDocumento: Int
  dataContabilizacaoDocumento: Int
  empenhoId: Int
}

type OrdemBancariaSumAggregate {
  id: Float
  numeroContrato: Float
  numeroConvenio: Float
  aditivoConvenio: Float
  codigoUg: Float
  ugFavorecida: Float
  versaoContrato: Float
  identificadorUsoCodigo: Float
  valorDocumento: Float
  empenhoId: Float
}

type OrdemBancariaAvgAggregate {
  id: Float
  numeroContrato: Float
  numeroConvenio: Float
  aditivoConvenio: Float
  codigoUg: Float
  ugFavorecida: Float
  versaoContrato: Float
  identificadorUsoCodigo: Float
  valorDocumento: Float
  empenhoId: Float
}

type OrdemBancariaMinAggregate {
  id: ID
  numeroDocumento: String
  numeroDocumentoOriginal: String
  credorIdentificacao: String
  finalidadePagamento: String
  justificativaEstorno: String
  numeroContrato: Float
  numeroConvenio: Float
  aditivoConvenio: Float
  idusoFonteRecurso: String
  situacaoOb: String
  notaFiscal: String
  beneficiarios: String
  codigoUg: Float
  ugFavorecida: Float
  versaoContrato: Float
  identificadorUsoCodigo: Float
  valorDocumento: Float
  dataEmissaoDocumento: DateTime
  dataContabilizacaoDocumento: DateTime
  empenhoId: Float
}

type OrdemBancariaMaxAggregate {
  id: ID
  numeroDocumento: String
  numeroDocumentoOriginal: String
  credorIdentificacao: String
  finalidadePagamento: String
  justificativaEstorno: String
  numeroContrato: Float
  numeroConvenio: Float
  aditivoConvenio: Float
  idusoFonteRecurso: String
  situacaoOb: String
  notaFiscal: String
  beneficiarios: String
  codigoUg: Float
  ugFavorecida: Float
  versaoContrato: Float
  identificadorUsoCodigo: Float
  valorDocumento: Float
  dataEmissaoDocumento: DateTime
  dataContabilizacaoDocumento: DateTime
  empenhoId: Float
}

type ListaNaturezaDespesa {
  NaturezaDespesa: String
  ValorItem: Float
}

type DadosCredor {
  CredorIdentificacao: String
  RazaoSocial: String
  Email: String
  Telefone: String
  CEP: String
  UF: String
  Municipio: String
  Bairro: String
  Logradouro: String
  Numero: String
  Complemento: String
}

type EmpenhoSpfDto {
  CodigoUG: Float
  NumeroEmpenho: String
  NumeroEmpenhoOriginal: String
  DataEmissaoEmpenho: String
  DataContabilizacao: String
  ValorEmpenho: Float
  TipoEmpenho: String
  ModalidadeEmpenho: String
  FuncionalProgramatica: String
  FonteRecurso: String
  NumeroContrato: Float
  VersaoContrato: String
  CodigoEvento: String
  ListaNaturezaDespesa: [ListaNaturezaDespesa!]
  DadosCredor: DadosCredor
}

type Query {
  empenhoAggregate(
    """Filter to find records to aggregate on"""
    filter: EmpenhoAggregateFilter
  ): [EmpenhoAggregateResponse!]!
  empenho(
    """The id of the record to find."""
    id: ID!
  ): Empenho
  empenhos(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: EmpenhoFilter = {}

    """Specify to sort results."""
    sorting: [EmpenhoSort!] = []
  ): EmpenhoConnection!
  ordemBancaria(
    """The id of the record to find."""
    id: ID!
  ): OrdemBancaria
  ordensBancarias(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: OrdemBancariaFilter = {}

    """Specify to sort results."""
    sorting: [OrdemBancariaSort!] = []
  ): OrdemBancariaConnection!
  buscarEmpenhosSpf(inputData: BuscarEmpenhosSpfInput!): [EmpenhoSpfDto!]!
  buscarObsSpf(inputData: BuscarObSpfInput!): [OrdemBancariaSpfDto!]!
}

input EmpenhoAggregateFilter {
  and: [EmpenhoAggregateFilter!]
  or: [EmpenhoAggregateFilter!]
  id: IDFilterComparison
  unidadeGestora: NumberFieldComparison
}

input EmpenhoFilter {
  and: [EmpenhoFilter!]
  or: [EmpenhoFilter!]
  id: IDFilterComparison
  unidadeGestora: NumberFieldComparison
  ordensBancarias: EmpenhoFilterOrdemBancariaFilter
}

input EmpenhoFilterOrdemBancariaFilter {
  and: [EmpenhoFilterOrdemBancariaFilter!]
  or: [EmpenhoFilterOrdemBancariaFilter!]
  id: IDFilterComparison
  numeroDocumento: StringFieldComparison
  numeroDocumentoOriginal: StringFieldComparison
  credorIdentificacao: StringFieldComparison
  finalidadePagamento: StringFieldComparison
  justificativaEstorno: StringFieldComparison
  numeroContrato: NumberFieldComparison
  numeroConvenio: NumberFieldComparison
  aditivoConvenio: NumberFieldComparison
  idusoFonteRecurso: StringFieldComparison
  situacaoOb: StringFieldComparison
  notaFiscal: StringFieldComparison
  beneficiarios: StringFieldComparison
  codigoUg: NumberFieldComparison
  ugFavorecida: NumberFieldComparison
  versaoContrato: NumberFieldComparison
  identificadorUsoCodigo: NumberFieldComparison
  valorDocumento: NumberFieldComparison
  dataEmissaoDocumento: DateFieldComparison
  dataContabilizacaoDocumento: DateFieldComparison
  empenhoId: NumberFieldComparison
}

input EmpenhoSort {
  field: EmpenhoSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EmpenhoSortFields {
  id
  unidadeGestora
}

input BuscarEmpenhosSpfInput {
  unidadeGestoraCodigo: Float!
  exercicio: Float!
  numeroEmpenho: String
  numeroEmpenhoOriginal: String
  fonteRecurso: String
  dataInicial: String
  dataFinal: String
}

input BuscarObSpfInput {
  unidadeGestoraCodigo: Float!
  exercicio: Float!
  numeroEmpenho: String!
  fonteRecurso: String
  dataInicial: String
  dataFinal: String
}

type Mutation {
  addOrdensBancariasToEmpenho(input: AddOrdensBancariasToEmpenhoInput!): Empenho!
  setOrdensBancariasOnEmpenho(input: SetOrdensBancariasOnEmpenhoInput!): Empenho!
  removeOrdensBancariasFromEmpenho(input: RemoveOrdensBancariasFromEmpenhoInput!): Empenho!
  createEmpenho(input: CreateOneEmpenhoInput!): Empenho!
  updateEmpenho(input: UpdateOneEmpenhoInput!): Empenho!
  deleteEmpenho(input: DeleteOneEmpenhoInput!): EmpenhoDeleteResponse!
  setEmpenhoOnOrdemBancaria(input: SetEmpenhoOnOrdemBancariaInput!): OrdemBancaria!
  removeEmpenhoFromOrdemBancaria(input: RemoveEmpenhoFromOrdemBancariaInput!): OrdemBancaria!
}

input AddOrdensBancariasToEmpenhoInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetOrdensBancariasOnEmpenhoInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveOrdensBancariasFromEmpenhoInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneEmpenhoInput {
  """The record to create"""
  empenho: CreateEmpenhoInput!
}

input CreateEmpenhoInput {
  unidadeGestora: Float!
  dataEmissao: String!
  funcionalProgramatica: String!
  numero: String!
  numeroOriginal: String
  valorEmpenho: Float!
  tipo: String!
  modalidade: String!
  exercicio: Float!
  numeroContrato: String
  numeroProcesso: String
}

input UpdateOneEmpenhoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateEmpenhoInput!
}

input UpdateEmpenhoInput {
  unidadeGestora: Float
  dataEmissao: String
  funcionalProgramatica: String
  numero: String
  numeroOriginal: String
  valorEmpenho: Float
  tipo: String
  modalidade: String
  exercicio: Float
  numeroContrato: String
  numeroProcesso: String
}

input DeleteOneEmpenhoInput {
  """The id of the record to delete."""
  id: ID!
}

input SetEmpenhoOnOrdemBancariaInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveEmpenhoFromOrdemBancariaInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}
